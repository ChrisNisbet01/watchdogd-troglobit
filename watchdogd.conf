# /etc/watchdogd.conf sample
# Commented out values are program defaults.
#
# The `warning` and `critical` ranges are 0-1 (0-100%), except for load
# average which can vary a lot between systems and use-cases, not just
# because of the number of CPU cores.  Use the `script = ...` setting to
# call script when `warning` and `critical` are reached for a monitor.
# In `critical` the monitor otherwise triggers an unconditional reboot.
#
# NOTE: `critical` is optional, omitting it disables the reboot action.
#

###
# Do not set WDT timeout and kick interval too low, the daemon runs at
# SCHED_OTHER level with all other tasks, unless the process supervisor
# is enabled.  The monitor plugins (below) need CPU time as well.
#timeout   = 20
#interval  = 10

###
# With safe-exit enabled (true) the daemon will ask the driver disable
# the WDT before exiting (SIGINT).  However, some WDT drivers (or HW)
# may not support this.
#safe-exit = false

### Supervisor
# Instrumented processes can have their main loop supervised.  Processes
# subscribe to this service using the libwdog API, see the docs for more
# on this, at which point watchdogd switches to SCHED_RR with the below
# realtime priority.  When the last process unsubscribes, watchdogd goes
# back to SCHED_OTHER.
#realtime = 98

### Reset cause
# The following settings control if/how the reset cause & reset counter
# is tracked.  By default this is disabled, since not all systems allow
# writing to disk, e.g. embedded systems using MTD devices with limited
# number of write cycles.  Another backend can be implemented and linked
# to the daemon, but --disable-rcfile with the configure script first.
#
# The default file setting is a non-volatile path, according to the FHS.
# It can be changed to another location, but make sure that location is
# writable first.
#reset-cause = disabled
#rcfile = "/var/lib/watchdogd.state"

### Checkers/Monitors ##################################################
#
# Script or command to run instead of reboot when a monitor plugin
# reaches any of its critical or warning level.  Called as:
#
#    script.sh {filenr, loadavg, meminfo} {crit, warn} VALUE
#
#script = /path/to/script.sh
#
# Monitors file desriptor leaks based on /proc/sys/fs/file-nr
#filenr {
#    interval = 300
#    logmark  = true
#    warning  = 0.9
#    critical = 1.0
#}

# Monitors load average based on sysinfo() from /proc/loadavg
# The level is composed from the average of the 1 and 5 min marks.
#loadavg {
#    interval = 300
#    logmark  = true
#    warning  = 1.0
#    critical = 2.0
#}

# Monitors free RAM based on data from /proc/meminfo
#meminfo {
#    interval = 300
#    logmark  = true
#    warning  = 0.9
#    critical = 0.95
#}

